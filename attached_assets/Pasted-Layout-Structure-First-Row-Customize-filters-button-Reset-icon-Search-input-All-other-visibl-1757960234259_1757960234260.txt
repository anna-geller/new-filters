Layout Structure

First Row: Customize filters button → Reset icon → Search input → All other visible filters (among State, Namespace, Labels, Flow, Scope, Kind, Subflow, Iinitial Execution etc.) that fit into this available space between the Search input and the Save filter → Save filter → Saved filters dropdown → Table options button

Second Row: All other visible filters (among State, Namespace, Labels, Flow, Scope, Kind, Subflow, Initial Execution etc.) that couldn’t fit into the available space between the Search input and the Save filter in the first row

Third Row: Only if “Table options” is expanded, shows the detailed table options (no change is needed)

Filter Customization

"Customize filters" button with filter icon positioned on the left

Clicking opens a modal/dropdown with eye icons to toggle filter visibility

By default, only Search and Time range are visible

All other filters (State, Namespace, Labels, Flow, Scope, Kind, Subflow, Initial Execution, etc.) must be explicitly enabled via eye icons

Filter Display

Search and Time Range: Always visible as direct input controls in the first row with 7 days being the default for Time range

Other Filters: Show only when enabled, displaying "FILTER_NAME in any value" with format "FILTER_NAME [operator] [value]" where:

Operators are displayed in green color (e.g., "in", "not in", "starts with")

Values are in white

Each has Edit (pencil) and Clear (X) icons on the right

Edit Functionality

Clicking Edit icon on a filter opens an inline editor below it

Editor shows operator dropdown (in, not in, starts with, contains) and multi-select options

Editor has Apply and Clear buttons

Clicking Clear (X) icon removes the filter value entirely

Reset Functionality

Reset icon (↻) positioned between "Customize filters" and Search input

Hover tooltip shows "Reset all filters"

Clicking clears all applied filters

Table Options

"Table options" button with chevron icon (down when collapsed, up when expanded)

When expanded, shows additional row with:

Left side: "Show Chart" toggle switch, by default toggled off

Right side: "Periodic refresh" toggle, "Refresh data" button, "Columns" button

"Columns" button opens column customization 

Filter Behavior

Filters that don't fit on the first row wrap to the second row starting from the left edge

When too many filters are applied, they wrap to new lines below the "Customize filters" button

All filters should be clickable to edit, clicking anywhere outside of the filter should close the filter editor

Operators should be consistently green across all filter types

Visual Design

Dark theme with gray backgrounds

Green operators, white values, gray labels

Proper spacing and alignment

Responsive design that handles multiple filter rows gracefully

The component should provide a clean, intuitive filtering experience where users can easily customize which filters are visible, apply complex filter conditions, and manage their filter state efficiently.

Available filters

The State filter should allow operators IN or NOT IN with multiselect dropdown allowing to type a given state, select all or deselect all.

The available states include:

CREATED

RESTARTED

SUCCESS

RUNNING

KILLING

KILLED

WARNING

FAILED

PAUSED

CANCELLED

SKIPPED

QUEUED

RETRYING

RETRIED

BREAKPOINT

The Namespace filter should allow operators IN, NOT IN, CONTAINS, STARTS_WITH, ENDS_WITH with multiselect dropdown allowing to type a given namespace name, select all or deselect all available namespaces.

The Labels filter should allow multiple operators described below.

Labels Structure

Labels are key-value pairs in the format key:value (e.g., env:production, team:backend, priority:high). They allow flexible categorization and filtering of data items.

Available Operators

1. Equals (Green chain link icon)

Description: "Exact label match"

Usage: Matches labels with exact key-value pairs

Example: env:production matches only items with exactly env:production

2. Not equals (Red chain link icon)

Description: "Exclude exact label match"

Usage: Excludes items with specific key-value pairs

Example: env:staging excludes items that have env:staging

3. Contains (Blue chain link icon)

Description: "Label contains substring"

Usage: Matches labels containing a substring anywhere in the key or value

Example: production matches env:production, team:production, app:production-backend

4. In (Orange chain link icon)

Description: "Match any of the comma-separated labels (OR logic)"

Usage: Matches items that have any of the specified labels

Example: env:production,team:backend matches items with either env:production OR team:backend

5. Not in (Red chain link icon)

Description: "Exclude any of the comma-separated labels (OR logic)"

Usage: Excludes items that have any of the specified labels

Example: env:staging,team:frontend excludes items with either env:staging OR team:frontend

6. Is set (Green chain link icon)

Description: "Has any label with the specified key (e.g., 'env')"

Usage: Matches items that have any label with the specified key, regardless of value

Example: env matches items with env:production, env:staging, env:development, etc.

7. Is not set (Red chain link icon)

Description: "Does not have any label with the specified key"

Usage: Excludes items that have any label with the specified key

Example: env excludes items that have any env:* label

Filter Interface Behavior for Labels

Adding Labels to Filters

Click on any label in the table → Automatically adds it to the Labels filter

Manual entry → Type in the "Add labels filter..." input field under Equal operator

Press Enter → Applies the filter with the current operator

Filter Display

Shows as: Labels [operator] [value]

Operator appears in green (e.g., "in", "equals", "contains")

Value shows the actual label(s) being filtered

Edit and Clear icons allow modification/removal

Multi-Label Filtering

OR Logic: When multiple labels are specified (comma-separated), items matching ANY of them are included

Key-Value Matching: Each label must match exactly as key:value pairs

Partial Matching: "Contains" operator allows substring matching within labels

Common Use Cases

Environment filtering: env:production to show only production items

Team filtering: team:backend to show backend team items

Priority filtering: priority:high to show high-priority items

Multi-criteria: env:production,team:backend to show production backend items

Key existence: env (Is set) to show items with any environment label

This flexible system allows users to filter data based on any combination of label criteria, making it easy to find specific subsets of data in large datasets.

Based on typical execution filtering patterns, here's how the Scope, Kind, Subflow, and Initial Execution filters work:

Scope Filter

Purpose: Determines which executions are visible.

Options:

User Executions: Shows only executions initiated by the regular users 

System Executions: Shows only system executions

All Executions: Shows both system and user executions

Kind Filter

Purpose: Filters executions based on their execution kind. This should be a multiselect dropdown with the option to select all or deselect all.

Options:

Default: Standard workflow executions (preselected by default)

Playground: Executions triggered from Playground mode

Test: Executions triggered by Unit Tests

Behavior:

Multi-select dropdown allowing multiple kinds

Shows count of selected kinds (e.g., "3 selected")

Subflow Filter

Purpose: Controls whether to include or exclude subflow executions in the results.

Options:

All Executions: Shows both main flows and subflows executions

Child Executions: Shows only child executions

Parent Executions: Shows only parent executions

Behavior:

Important for understanding execution hierarchy

Subflows are nested executions called from main flows

Affects the depth of execution data shown

Initial Execution Filter

Filters all downstream executions initiated by a specific execution ID. This is a simple text field where user would need to enter the full execution ID.

